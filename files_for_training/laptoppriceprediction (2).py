# -*- coding: utf-8 -*-
"""laptopPricePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r0E6GXNn-nlRjLgej1aCq846AM61H8lK
"""

import pandas as pd
import numpy as np

raw_df = pd.read_csv('D:/GLIM/Term5/Predictivie Aalytics Lab 2/laptop/files_for_training/datasets/laptop_data_cleaned.csv')

raw_df.head()

raw_df.columns

df = raw_df.copy()

df = df.drop(columns=['Ppi'])

df.columns

print(df.isnull().sum())

print(df.dtypes)

df.describe()





# Define bins and labels for weight
bins = [0, 1.5, 2.5, 5]  # Weight categories (adjust as needed)
labels = ['Light', 'Medium', 'Heavy']  # Corresponding labels

# Create a new column for weight categories
df['Weight_Category'] = pd.cut(df['Weight'], bins=bins, labels=labels)

# Display the first few rows to confirm
df[['Weight', 'Weight_Category']].head()

df

df = df.drop(columns=['Weight'])

df

categorical_columns = ['Company', 'TypeName', 'Weight_Category', 'Cpu_brand', 'Gpu_brand', 'Os']
df_encoded = pd.get_dummies(df, columns=categorical_columns, drop_first=True)
df_encoded = df_encoded.astype(float)
df_encoded.head()





from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import numpy as np

# Define features and target
X = df_encoded.drop(columns=['Price'])
y = df_encoded['Price']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
r2 = r2_score(y_test, y_pred).round(3)
mae = mean_absolute_error(y_test, y_pred).round(3)
rmse = np.sqrt(mean_squared_error(y_test, y_pred)).round(3)

# Display evaluation metrics
print(f"R-squared: {r2}")
print(f"Mean Absolute Error: {mae}")
print(f"Root Mean Squared Error: {rmse}")

print(df_encoded.shape)





import pickle
pickle.dump(model, open('model.pkl', 'wb'))

